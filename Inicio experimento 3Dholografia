<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>3D Starter App</title>
  <style>canvas { display: block; }</style>
</head>
<body>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    // Crear la escena
    const scene = new THREE.Scene();

    // Crear la cámara
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    // Crear el renderizador
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Crear un cubo
    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    // Crear la animación
    function animate() {
      requestAnimationFrame(animate);

      // Rotar el cubo
      cube.rotation.x += 0.01;
      cube.rotation.y += 0.01;

      // Renderizar la escena
      renderer.render(scene, camera);
    }

    animate();
  </script>
</body><!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Triangle Example</title>
  <style>
    body { margin: 0; }
    canvas { display: block; }
  </style>
</head>
<body>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    // Crear la escena
    const scene = new THREE.Scene();

    // Crear la cámara
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Crear la geometría del triángulo
    const geometry = new THREE.BufferGeometry();
    const vertices = new Float32Array([
      0.0,  1.0, 0.0,
     -1.0, -1.0, 0.0,
      1.0, -1.0, 0.0
    ]);
    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));

    // Crear el material
    const material = new THREE.MeshBasicMaterial({ color: 0xff0000, side: THREE.DoubleSide });

    // Crear la malla (triángulo)
    const triangle = new THREE.Mesh(geometry, material);
    scene.add(triangle);

    // Crear el bucle de animación
    function animate() {
      requestAnimationFrame(animate);
      triangle.rotation.x += 0.01;
      triangle.rotation.y += 0.01;
      renderer.render(scene, camera);
    }

    animate();
  </script>
</body>
</html>
</html>
